#version 460 core
#define N 100
#define SIZE ((N+2) * (N+2))
#define IX(x, y) ((x)+(N+2)*(y))

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout (std430, binding = 1) buffer input_dens_buf { 
	float dens_in[SIZE]; 
};
layout (std430, binding = 2) buffer input_u_buf { 
	float u_in[SIZE]; 
};
layout (std430, binding = 3) buffer input_v_buf { 
	float v_in[SIZE];
};
layout (std430, binding = 4) buffer output_dens_buf { 
	float dens_out[SIZE]; 
};
layout (std430, binding = 5) buffer output_u_buf { 
	float u_out[SIZE]; 
};
layout (std430, binding = 6) buffer output_v_buf { 
	float v_out[SIZE];
};
layout (std430, binding = 7) buffer tmp_dens_buf { 
	float dens_tmp[SIZE]; 
};
layout (std430, binding = 8) buffer tmp_u_buf { 
	float u_tmp[SIZE]; 
};
layout (std430, binding = 9) buffer tmp_v_buf { 
	float v_tmp[SIZE]; 
};
uniform float dt;
uniform float diff;
uniform float visc;
uniform int which;
uniform int d0;

void main()
{
	//uint i = gl_GlobalInvocationID.x + (N+2) * (N+2-gl_GlobalInvocationID.y);
	uint i = gl_GlobalInvocationID.x;

	//sides
	//corners
	if (i == 0) {
		switch (which) {
			case 0:
			u_out[IX(  0,   0)] = 0.5*(u_in[IX(1,   0)]+u_in[IX(  0, 1)]);
			u_out[IX(  0, N+1)] = 0.5*(u_in[IX(1, N+1)]+u_in[IX(  0, N)]);
			u_out[IX(N+1,   0)] = 0.5*(u_in[IX(N,   0)]+u_in[IX(N+1, 1)]);
			u_out[IX(N+1, N+1)] = 0.5*(u_in[IX(N, N+1)]+u_in[IX(N+1, N)]);
			break;
			case 1:
			dens_out[IX(  0,   0)] = 0.5*(dens_in[IX(1,   0)]+dens_in[IX(  0, 1)]);
			dens_out[IX(  0, N+1)] = 0.5*(dens_in[IX(1, N+1)]+dens_in[IX(  0, N)]);
			dens_out[IX(N+1,   0)] = 0.5*(dens_in[IX(N,   0)]+dens_in[IX(N+1, 1)]);
			dens_out[IX(N+1, N+1)] = 0.5*(dens_in[IX(N, N+1)]+dens_in[IX(N+1, N)]);
			break;
			case 2:
			v_out[IX(  0,   0)] = 0.5*(v_in[IX(1,   0)]+v_in[IX(  0, 1)]);
			v_out[IX(  0, N+1)] = 0.5*(v_in[IX(1, N+1)]+v_in[IX(  0, N)]);
			v_out[IX(N+1,   0)] = 0.5*(v_in[IX(N,   0)]+v_in[IX(N+1, 1)]);
			v_out[IX(N+1, N+1)] = 0.5*(v_in[IX(N, N+1)]+v_in[IX(N+1, N)]);
			break;
		}
	} else {
		switch (which) {
			case 0:
				u_out[IX(  0,   i)] = d0==1 ? -u_in[IX(1,i)] : u_in[IX(1,i)];
				u_out[IX(N+1,   i)] = d0==1 ? -u_in[IX(N,i)] : u_in[IX(N,i)];
				u_out[IX(  i,   0)] = d0==2 ? -u_in[IX(i,1)] : u_in[IX(i,1)];
				u_out[IX(  i, N+1)] = d0==2 ? -u_in[IX(i,N)] : u_in[IX(i,N)];
			break;
			case 1:
				dens_out[IX(  0,   i)] = d0==1 ? -dens_in[IX(1,i)] : dens_in[IX(1,i)];
				dens_out[IX(N+1,   i)] = d0==1 ? -dens_in[IX(N,i)] : dens_in[IX(N,i)];
				dens_out[IX(  i,   0)] = d0==2 ? -dens_in[IX(i,1)] : dens_in[IX(i,1)];
				dens_out[IX(  i, N+1)] = d0==2 ? -dens_in[IX(i,N)] : dens_in[IX(i,N)];
			break;
			case 2:
				v_out[IX(  0,   i)] = d0==1 ? -v_in[IX(1,i)] : v_in[IX(1,i)];
				v_out[IX(N+1,   i)] = d0==1 ? -v_in[IX(N,i)] : v_in[IX(N,i)];
				v_out[IX(  i,   0)] = d0==2 ? -v_in[IX(i,1)] : v_in[IX(i,1)];
				v_out[IX(  i, N+1)] = d0==2 ? -v_in[IX(i,N)] : v_in[IX(i,N)];
			break;
		} 
	}
}


