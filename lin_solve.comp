#version 460 core
#define N 100
#define SIZE ((N+2) * (N+2))
#define IX(x, y) ((x)+(N+2)*(y))

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout (std430, binding = 1) buffer input_dens_buf { 
	float dens_in[SIZE]; 
};
layout (std430, binding = 2) buffer input_u_buf { 
	float u_in[SIZE]; 
};
layout (std430, binding = 3) buffer input_v_buf { 
	float v_in[SIZE];
};
layout (std430, binding = 4) buffer output_dens_buf { 
	float dens_out[SIZE]; 
};
layout (std430, binding = 5) buffer output_u_buf { 
	float u_out[SIZE]; 
};
layout (std430, binding = 6) buffer output_v_buf { 
	float v_out[SIZE];
};
layout (std430, binding = 7) buffer tmp_dens_buf { 
	float dens_tmp[SIZE]; 
};
layout (std430, binding = 8) buffer tmp_u_buf { 
	float u_tmp[SIZE]; 
};
layout (std430, binding = 9) buffer tmp_v_buf { 
	float v_tmp[SIZE]; 
};
//uniform float dt;
//uniform float diff;
//uniform float visc;
uniform float a;
uniform float a0;
uniform uint which;

void main()
{
	uint x = gl_GlobalInvocationID.x+1;
	uint y = gl_GlobalInvocationID.y+1;
	uint i = x + (N+2) * y;

	if (which == 0) {
	u_tmp[i] = (u_out[i] + a0 *
				(u_in[IX(x-1, y  )] + u_in[IX(x+1, y  )] + 
				 u_in[IX(x  , y-1)] + u_in[IX(x  , y+1)])) / a;
	} else if (which == 1) {
	dens_tmp[i] = (dens_out[i] + a0 *
				(dens_in[IX(x-1, y  )] + dens_in[IX(x+1, y  )] + 
				 dens_in[IX(x  , y-1)] + dens_in[IX(x  , y+1)])) / a;
	} else if (which == 2) {
	v_tmp[i] = (v_out[i] + a0 *
				(v_in[IX(x-1, y  )] + v_in[IX(x+1, y  )] + 
				 v_in[IX(x  , y-1)] + v_in[IX(x  , y+1)])) / a;
	}
	//swap_buffer tmp with out
}

